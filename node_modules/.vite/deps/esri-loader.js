import "./chunk-5WRI5ZAA.js";

// node_modules/esri-loader/dist/esm/utils/index.js
var isBrowser = typeof window !== "undefined";
var utils_default = {
  Promise: isBrowser ? window["Promise"] : void 0
};

// node_modules/esri-loader/dist/esm/utils/url.js
var DEFAULT_VERSION = "4.25";
var NEXT = "next";
function parseVersion(version) {
  if (version.toLowerCase() === NEXT) {
    return NEXT;
  }
  var match = version && version.match(/^(\d)\.(\d+)/);
  return match && {
    major: parseInt(match[1], 10),
    minor: parseInt(match[2], 10)
  };
}
function getCdnUrl(version) {
  if (version === void 0) {
    version = DEFAULT_VERSION;
  }
  return "https://js.arcgis.com/".concat(version, "/");
}
function getCdnCssUrl(version) {
  if (version === void 0) {
    version = DEFAULT_VERSION;
  }
  var baseUrl = getCdnUrl(version);
  var parsedVersion = parseVersion(version);
  if (parsedVersion !== NEXT && parsedVersion.major === 3) {
    var path = parsedVersion.minor <= 10 ? "js/" : "";
    return "".concat(baseUrl).concat(path, "esri/css/esri.css");
  } else {
    return "".concat(baseUrl, "esri/themes/light/main.css");
  }
}

// node_modules/esri-loader/dist/esm/utils/css.js
function createStylesheetLink(href) {
  var link = document.createElement("link");
  link.rel = "stylesheet";
  link.href = href;
  return link;
}
function insertLink(link, before) {
  if (before) {
    var beforeNode = document.querySelector(before);
    beforeNode.parentNode.insertBefore(link, beforeNode);
  } else {
    document.head.appendChild(link);
  }
}
function getCss(url) {
  return document.querySelector('link[href*="'.concat(url, '"]'));
}
function getCssUrl(urlOrVersion) {
  return !urlOrVersion || parseVersion(urlOrVersion) ? getCdnCssUrl(urlOrVersion) : urlOrVersion;
}
function loadCss(urlOrVersion, before) {
  var url = getCssUrl(urlOrVersion);
  var link = getCss(url);
  if (!link) {
    link = createStylesheetLink(url);
    insertLink(link, before);
  }
  return link;
}

// node_modules/esri-loader/dist/esm/script.js
var defaultOptions = {};
function createScript(url) {
  var script = document.createElement("script");
  script.type = "text/javascript";
  script.src = url;
  script.setAttribute("data-esri-loader", "loading");
  return script;
}
function handleScriptLoad(script, callback, errback) {
  var onScriptError;
  if (errback) {
    onScriptError = handleScriptError(script, errback);
  }
  var onScriptLoad = function() {
    callback(script);
    script.removeEventListener("load", onScriptLoad, false);
    if (onScriptError) {
      script.removeEventListener("error", onScriptError, false);
    }
  };
  script.addEventListener("load", onScriptLoad, false);
}
function handleScriptError(script, callback) {
  var onScriptError = function(e) {
    callback(e.error || new Error("There was an error attempting to load ".concat(script.src)));
    script.removeEventListener("error", onScriptError, false);
  };
  script.addEventListener("error", onScriptError, false);
  return onScriptError;
}
function setDefaultOptions(options) {
  if (options === void 0) {
    options = {};
  }
  defaultOptions = options;
}
function getScript() {
  return document.querySelector("script[data-esri-loader]");
}
function isLoaded() {
  var globalRequire = window["require"];
  return globalRequire && globalRequire.on;
}
function loadScript(options) {
  if (options === void 0) {
    options = {};
  }
  var opts = {};
  [defaultOptions, options].forEach(function(obj) {
    for (var prop in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
        opts[prop] = obj[prop];
      }
    }
  });
  var version = opts.version;
  var url = opts.url || getCdnUrl(version);
  return new utils_default.Promise(function(resolve, reject) {
    var script = getScript();
    if (script) {
      var src = script.getAttribute("src");
      if (src !== url) {
        reject(new Error("The ArcGIS API for JavaScript is already loaded (".concat(src, ").")));
      } else {
        if (isLoaded()) {
          resolve(script);
        } else {
          handleScriptLoad(script, resolve, reject);
        }
      }
    } else {
      if (isLoaded()) {
        reject(new Error("The ArcGIS API for JavaScript is already loaded."));
      } else {
        var css = opts.css;
        if (css) {
          var useVersion = css === true;
          loadCss(useVersion ? version : css, opts.insertCssBefore);
        }
        script = createScript(url);
        handleScriptLoad(script, function() {
          script.setAttribute("data-esri-loader", "loaded");
          resolve(script);
        }, reject);
        document.body.appendChild(script);
      }
    }
  });
}

// node_modules/esri-loader/dist/esm/modules.js
function requireModules(modules) {
  return new utils_default.Promise(function(resolve, reject) {
    var errorHandler = window["require"].on("error", reject);
    window["require"](modules, function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      errorHandler.remove();
      resolve(args);
    });
  });
}
function loadModules(modules, loadScriptOptions) {
  if (loadScriptOptions === void 0) {
    loadScriptOptions = {};
  }
  if (!isLoaded()) {
    var script = getScript();
    var src = script && script.getAttribute("src");
    if (!loadScriptOptions.url && src) {
      loadScriptOptions.url = src;
    }
    return loadScript(loadScriptOptions).then(function() {
      return requireModules(modules);
    });
  } else {
    return requireModules(modules);
  }
}
export {
  getScript,
  isLoaded,
  loadCss,
  loadModules,
  loadScript,
  setDefaultOptions,
  utils_default as utils
};
//# sourceMappingURL=esri-loader.js.map
